<?php

/**
  * Implements hook_menu().
  */
function normas_menu() {
  $items = array();

  $items['admin/migracion/normas'] = array(
    'title' => 'Migración de Normas',
    'description' => 'Run batch operations.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('normas_lr_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
   );
  return $items;
}

function normas_lr_form(){
  $form = array();
  $form['submit'] = array('#type' => 'submit', '#value' => t('Click here to Start'));
  return $form;
}

function normas_lr_form_submit($form, $form_state){
    batch_set(normas_lr_build_batch());
}

function normas_lr_build_batch(){
    db_set_active('sinia');
    $query = "SELECT idelemento FROM norma";
    
    $results = db_query($query);
    db_set_active('default'); 
    
    
  // Here we can add multiple operation using an array variable.
  // $operations[] = array('migracion_process_data', array($progress, $limit)); // operation with argument
   //$operations[] = array('migracion_process_data_2'); // operation without argument

  //Define your batch operation here
  $batch = array(
    'title' => t('Batch operation process'),
    //'operations' => $operations,
    'finished' => 'migracion_lr_build_batch_finished',
    'init_message' => t('Initializing...'),
    'progress_message' => t('Opertation @current out of @total.'),
    'error_message' => t('Found some error here.'),
  );

  $progress = 0; // where to start
  $limit = 5; // how many to process for each run
  $max = $results->rowCount(); // how many records to process until stop - can do query here to get max times to run
  while ($progress <= $max) {
    $batch['operations'][] = array('normas_process_data', array($progress, $limit));
    $progress = $progress + $limit;
  }
  
  
  return $batch;
}


function normas_lr_build_batch_finished($success, $results, $operations) {
  if ($success) {
    // Here we could do something meaningful with the results.
    // We just display the number of data we processed...
    drupal_set_message(t('@count document  processed.', array('@count' => count($results))));
  } else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    drupal_set_message(t('An error occurred while processing @operation with arguments : @args', array('@operation' => $error_operation[0], '@args' => print_r($error_operation[0], TRUE))));
  }
}




function normas_process_data($progress, $limit, &$context){ 
    db_set_active('sinia');
    $query = "
      SELECT 
      n.idelemento,  n.numeronorma, n.fechaaprobacion,
      e.nombre as title, e.descripcion as body, e.fecha as fechapublicacion, e.fechareg as fechasave,  rep.nombre as repterritorial,
      info.nombre as fuenteinformacion, info.sigla,
      array_to_string(array_agg(temas.nombre),',')  as temas,
      tipos.tipos,
      portada.portada as urlportada,
      docs.urlarchivos as urlarchivos,
      docurl.urlarchivos as urlweb
      FROM norma  n
      LEFT JOIN  elemento e ON e.idelemento = n.idelemento
      LEFT JOIN elemento_has_fuenteinfo ehf ON ehf.idelemento = e.idelemento
      LEFT JOIN fuenteinformacion info ON info.idfuenteinformacion = ehf.idfuenteinformacion
      LEFT JOIN elemento_has_marco ehm ON  ehm.idelemento = e.idelemento
      LEFT JOIN marcoordenador temas ON temas.idmarcoordenador = ehm.idmarcoordenador
      LEFT JOIN repterritorial rep ON rep.idrepterritorial = e.idrepterritorial
      LEFT JOIN (SELECT
        e.idelemento,
        array_to_string(array_agg(tipo.nombre),',')  as tipos
        FROM elemento e
        INNER JOIN elemento_has_tipoelemento eht ON eht.idelemento = e.idelemento
        INNER JOIN tipoelemento tipo ON tipo.idtipoelemento = eht.idtipoelemento
        GROUP BY e.idelemento
        ORDER BY e.idelemento) tipos ON tipos.idelemento = e.idelemento
      LEFT JOIN (SELECT 
        eport.idelemento, doc2.url as portada
        FROM elemento_has_docadjunto eport
        INNER JOIN docadjunto doc2 ON doc2.iddocadjunto = eport.iddocadjunto
        WHERE doc2.idtipodocadjunto = 1) portada ON portada.idelemento = e.idelemento
      LEFT JOIN (SELECT
        eht2.idelemento, 
        array_to_string(array_agg(doc3.url),',')  as urlarchivos
        FROM elemento_has_docadjunto eht2
        INNER JOIN docadjunto doc3 ON doc3.iddocadjunto = eht2.iddocadjunto
        WHERE doc3.idtipodocadjunto = 3
        GROUP BY eht2.idelemento) docs ON docs.idelemento = n.idelemento
      LEFT JOIN (SELECT
        eht2.idelemento, 
        array_to_string(array_agg(doc3.url),',')  as urlarchivos
        FROM elemento_has_docadjunto eht2
        INNER JOIN docadjunto doc3 ON doc3.iddocadjunto = eht2.iddocadjunto
        WHERE doc3.idtipodocadjunto = 2
        GROUP BY eht2.idelemento) docurl ON docurl.idelemento = e.idelemento
      GROUP BY n.idelemento, e.idelemento, info.nombre, info.sigla, tipos.tipos, portada.portada, rep.nombre, docs.urlarchivos, docurl.urlarchivos
      ORDER BY n.idelemento
      ";
    
    $results = db_query_range($query, $progress, $limit);
    db_set_active('default');
    
    foreach ($results as $row) {
        $e = entity_create('node', array('type' => 'normatividad'));
        $e->uid = 1; // Specify the author
        // Create a Entity Wrapper of that new Entity
        $entity = entity_metadata_wrapper('node',$e);
        $entity->title = drupal_substr($row->title, 0, 252);  //título     
      
        $entity->body = array(  //body
                        'value' => $row->body,
                        'format' => 'full_html',
                ); 
        
        
        //migrando portadas
        if($row->urlportada) {
          $uri = 'public://archivos/' . $row->urlportada;
          $file = new stdClass();
          $file->fid = NULL;
          $file->uri = $uri;
          $file->uid = 1;
          $file->filename = drupal_basename($uri);
          $file->filemime = file_get_mimetype($uri);
          $file = file_save($file);
          
          $entity->field_caratula->file = $file;
        }
        
        if($row->urlarchivos) {
          $uris = explode(",", $row->urlarchivos);
          $i = 0;
          foreach ($uris as $uri) {
            $uri = 'public://archivos/' . $uri;

            $file = new stdClass();
            $file->fid = NULL;
            $file->uri = $uri;
            $file->uid = 1;
            $file->filename = drupal_basename($uri);
            $file->filemime = file_get_mimetype($uri);
            $file = file_save($file);
            
            $entity->field_file_archivo[$i]->file->set($file);
            
            $i++;
          }
        }


        if($row->tipos) {
          $tipos = explode(',', $row->tipos);
          if($tipos){
            foreach($tipos as $tipo) {
              $tipo = trim($tipo);
              if (($tipo == 'Distrital') || ($tipo == 'Nacional') || ($tipo == 'Provincial') || ($tipo == 'Regional') || ($tipo == 'Supranacional')) {
                $tipo_app[] = taxonomy_term_load(recover_tid_for_taxonomy_name($tipo,11 , 'ambito_de_aplicacion'));
              }else{
                $tipo_norma[] = taxonomy_term_load(recover_tid_for_taxonomy_name($tipo,5 , 'tipo_de_normas'));
              }
            }
            $entity->field_tipo_de_norma->set($tipo_norma);
            $entity->field_ambito_de_aplicacion->set($tipo_app);
          }
        }
        
        if($row->numeronorma) {
          $entity->field_numero_de_la_norma->set($row->numeronorma);
        }
        
        if($row->fechaaprobacion) {
          $entity->field_fecha_de_aprobacion_norma->set(strtotime($row->fechaaprobacion));
        }
        
        if($row->repterritorial) {
          $entity->field_representacion_territorial->set(taxonomy_term_load(recover_tid_for_taxonomy_name($row->repterritorial,8 , 'representacion_territorial')));
          $entity->field_ubigeo->set(taxonomy_term_load(recover_tid_for_taxonomy_name($row->repterritorial,8 , 'representacion_territorial')));
        }
        
        if($row->fuenteinformacion) {
          $entity->field_fuente_de_informacion = taxonomy_get_term_by_name($row->fuenteinformacion, 'fuente_de_informacion');
        }
        
        if($row->temas) {
          $temas = explode(',', $row->temas);
          if($temas){
              foreach($temas as $tema) {
                  $tematicas[] = taxonomy_term_load(recover_tid_for_taxonomy_name($tema, 7, 'tematica'));
              }        
              $entity->field_descriptores_tematicos->set($tematicas);
          }
        }
        
        if($row->urlweb) {
          $entity->field_url_archivo->set($row->urlweb);
        }
        
        
        $entity->save();         
    }
    
    // update progress for message
    $progress = $progress + $limit; 
    // update message during each run so you know where you are in the process
    $context['message'] = 'Now processing ' . $progress . ' - ' . $context['results'][0] . ' imported';  
}